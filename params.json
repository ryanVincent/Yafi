{"name":"Yafi","tagline":"Yet Another Flux Implementation","body":"#jules.js\r\n\r\n## Description\r\nJules.js is an implementation of the FLUX Architecture. I decided to implement the specification in order to gain a deeper understanding of the framework and have a small library I know well and could edit when necessary. \r\n\r\n## Getting started\r\nDownload the latest build and then include yafi in your porject like so:\r\n\r\n```\r\n<script src=\"/location/of/yafi-min.js\"></script>\r\n```\r\n\r\nYafi exposes 5 classes that aid in the implementation of the FLUX architecture within a project:\r\n*Action\r\n*Dispatcher\r\n*Emitter\r\n*Store\r\n*WebAPI\r\n\r\n##Data flow\r\nThe data flow in a flux application is unidirectional. Actions come from external sources such as the user or the server and are always collected by the Dispatcher. Stores listen to the Dispatcher and react to new data coming through the pipeline. If the action has caused the Store to alter it's internal state then the Store emits a change using it's Emitter. Application views can choose to listen to a store for changes and when a Store changes can query it's internal state.\r\n\r\n![Flux Diagram](http://blog.krawaller.se/img/flux-diagram.png)\r\n\r\n##Dispatcher\r\nYour application should contain a single instance of the Dispatcher class. Any and all actions should be routed through the dispatcher via `dispatcher.dispatch(action);`.\r\n\r\n###methods \r\n\r\nSignature | Description | Returns\r\n----------|-------------|--------\r\ndispatch(action :Object or Action) | dispatches an action to any registered callbacks. | void\r\nisDispatching() | returns true if the dispatcher is currently in the process of dispatching events. | true if currently dispatching.\r\nregister(callback) | Registers a callback which is invoked everytime an action is dispatched. | a token used to reference the callback. \r\nunregister(token) | Unregisters a callback | void\r\nwaitFor(string[]) | Wait for a a set of calbacks to be completed before continuing. | void\r\n\r\n###example\r\nInstantiate: \r\n```\r\nvar appDispatcher = new Dispatcher();\r\n```\r\nRegister a callback which will be called when an action is dispatched: \r\n\r\n```\r\nappDispatcher.register(function(action){\r\n  console.log(action);\r\n});\r\n```\r\n\r\nDispatch an action to any listening callbacks: \r\n\r\n```\r\nvar action = {say: \"hello\"};\r\nappDispatcher.dispatch(action);\r\n// -> {say: \"hello\"}\r\n```\r\n\r\n##Store\r\nStores are used to store information about your applications state. They should be regarded as the single source of truth in your application. A Store's state should never be edited by an external source instead the Store should implement it's own methods for manipulating it's state and these methods should be registered with the dispatcher using `addDispatchListener(callback)` method.\r\n\r\n###methods\r\n\r\nSignature | Description | Returns\r\n----------|-------------|--------\r\ngetState() | Returns the current state of the Store. | current state of the store.\r\nsetState(state) |Use this method to update the internal state of the Store. Should only be called from within a callback registered by addDispatchListener. | void\r\naddDispatchListener(callback) | Used to listen for actions coming from the dispatcher. | token {String} token representing the callback\r\nremoveDispatchListener(token) | Used to remove a dispatchListener. This listener will no longer be invoked when the Dispatcher dispatches actions to the Stores. | void\r\ngetDispatcherToken() | gets the dispatcher token for the store. Can be used by `dispatcher.waitFor()` to wait for this Store to complete it's callbacks. | token {String} token representing the Store.\r\nemit(type) | Lets any view that is listening know that a change has occured in this store. | void\r\non(type, callback) |  Used by views to listen for updates to the Store via it's emitter. | void\r\n\r\n \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}