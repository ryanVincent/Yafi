{"name":"Jules","tagline":"FLUX Architecture Implementation","body":"#jules.js\r\n\r\n## Description\r\nJules.js is an implementation of the FLUX Architecture. I decided to implement the specification in order to gain a deeper understanding of the framework and have a small library I know well and could edit when necessary. \r\n\r\n## Getting started\r\nDownload the latest build and then include jules in your project like so:\r\n\r\n```javascript\r\n<script src=\"/location/of/jules-min.js\"></script>\r\n```\r\n\r\nJules exposes 5 classes that aid in the implementation of the FLUX architecture within a project:\r\n*Action\r\n*Dispatcher\r\n*Emitter\r\n*Store\r\n*WebAPI\r\n\r\n##Data flow\r\nThe data flow in a flux application is unidirectional. Actions come from external sources such as the user or the server and are always collected by the Dispatcher. Stores listen to the Dispatcher and react to new data coming through the pipeline. If the action has caused the Store to alter it's internal state then the Store emits a change using it's Emitter. Application views can choose to listen to a store for changes and when a Store changes can query it's internal state.\r\n\r\n![Flux Diagram](http://blog.krawaller.se/img/flux-diagram.png)\r\n\r\n##Dispatcher\r\nYour application should contain a single instance of the Dispatcher class. Any and all actions should be routed through the dispatcher via `dispatcher.dispatch(action);`.\r\n\r\n###methods \r\nThe dispatcher class exposes the following methods: \r\n\r\nSignature | Description | Returns\r\n----------|-------------|--------\r\ndispatch(action :Object or Action) | dispatches an action to any registered callbacks. | void\r\nisDispatching() | returns true if the dispatcher is currently in the process of dispatching events. | true if currently dispatching.\r\nregister(callback) | Registers a callback which is invoked everytime an action is dispatched. | a token used to reference the callback. \r\nunregister(token) | Unregisters a callback | void\r\nwaitFor(string[]) | Wait for a a set of calbacks to be completed before continuing. | void\r\n\r\n###example\r\nInstantiate: \r\n```javascript\r\nvar AppDispatcher = new Dispatcher();\r\n```\r\nRegister a callback which will be called when an action is dispatched: \r\n\r\n```\r\nAppDispatcher.register(function(action){\r\n  console.log(action);\r\n});\r\n```\r\n\r\nDispatch an action to any listening callbacks: \r\n\r\n```javascript\r\nvar action = {say: \"hello\"};\r\nAppDispatcher.dispatch(action);\r\n// -> {say: \"hello\"}\r\n```\r\n\r\n##Store\r\nStores are used to store information about your applications state. They should be regarded as the single source of truth in your application. A Store's state should never be edited by an external source instead the Store should implement it's own methods for manipulating it's state and these should be registered with the dispatcher using `addDispatchListener(callback)` method.\r\n\r\n###methods\r\nThe store class exposes the following methods: \r\n\r\nSignature | Description | Returns\r\n----------|-------------|--------\r\ngetState() | Returns the current state of the Store. | current state of the store.\r\nsetState(state) |Use this method to update the internal state of the Store. Should only be called from within a callback registered by addDispatchListener. | void\r\naddDispatchListener(callback) | Used to listen for actions coming from the dispatcher. | token {String} token representing the callback\r\nremoveDispatchListener(token) | Used to remove a dispatchListener. This listener will no longer be invoked when the Dispatcher dispatches actions to the Stores. | void\r\ngetDispatcherToken() | gets the dispatcher token for the store. Can be used by `dispatcher.waitFor()` to wait for this Store to complete it's callbacks. | token {String} token representing the Store.\r\nemit(type) | Lets any view that is listening know that a change has occured in this store. | void\r\non(type, callback) |  Used by views to listen for updates to the Store via it's emitter. | void\r\n\r\n###example\r\nInstantiate Store.\r\n```javascript\r\nvar AppDispatcher = new Dispatcher();\r\nvar TodoStore = new Store(AppDispatcher);\r\n```\r\ncreate a function that will handle dispatched actions.\r\n```javascript\r\nTodoStore.handleAddItem = function(action){\r\n  switch(action.type){\r\n    case 'ADD_ITEM' : \r\n      var items = {};\r\n      items[action.payload.id] = action.payload;\r\n      this.setState({items: items});\r\n      this.emit('change'); //calls any functions that are registered via .on('change', fn).\r\n  }\r\n}\r\n```\r\nSet that function as a dispatch listener\r\n```javascript\r\nTodoStore.addDispatchListener(TodoStore.handleAddItem);\r\n```\r\n\r\nWithin your view component or wherever you rely on the Store's state.\r\n```javascipt\r\nTodo.on('change', function(){\r\n  var items = TodoStore.getState().items;\r\n  console.log(items);\r\n});\r\n```\r\nDispatch the action to the Stores.\r\n```javascript\r\nvar action = {\r\n  type: 'ADD_ITEM',\r\n  id: 1234,\r\n  text: 'Finish writing docs.'\r\n};\r\nAppDispatcher.dispatch(action);\r\n/* -> {items: \r\n        {\r\n          1234: {type: 'ADD_ITEM', id: 1234, text 'Finish writing docs.'}\r\n        }\r\n       } \r\n*/\r\n```\r\n##Action (Optional)\r\nThe Action class is an optional class which can be used to standardize actions within your application. \r\n\r\n###properties\r\nThe Action class exposes the following methods: \r\n\r\nName| Type| Description| Default\r\n----|-----|------------|--------\r\norigin | string | the origin of the action e.g \"user\" or \"server\" | \"unknown\"\r\ntype | string | this field can be used by stores to decide how to handle an action. Example values: 'ADD_ITEM'. 'ITEM_ADDED', 'DELETE_ITEM' | \"standard_action\"\r\npayload | Any | The information associated with the action. Anything can be passed into this parameter (it is recommended that a standard object is used). | passed in via constructor argument\r\nerror | Boolean | Whether or not the action represents an application error. | false\r\n\r\n###example\r\n\r\n```javascript\r\nvar payload = {id: 1234, text: 'Finish the docs.'}\r\n\r\nconst ADD_ITEM = \"add_item\";\r\nconst USER = \"user\";\r\n\r\nvar addItemAction = new Action(payload);\r\naddItemAction.type = ADD_ITEM;\r\naddItemAction.origin = USER;\r\n\r\nappDispatcher.dispatch(addItemAction);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}