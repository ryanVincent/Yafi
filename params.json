{"name":"Yafi","tagline":"Yet Another Flux Implementation","body":"#YAFI (Yet Another Flux Implementation)\r\n\r\n## Description\r\nYAFI is an Implementation of the FLUX Architecture. I decided to implement the specification in order to gain a deeper understanding of the framework and have a smalll library I could edit when necessary. \r\n\r\n## Getting started\r\nDownload the latest build and then include yafi in your porject like so:\r\n\r\n```\r\n<script src=\"/location/of/yafi-min.js\"></script>\r\n```\r\n\r\nYafi exposes 5 classes that aid in the implementation of the FLUX architecture within a project:\r\n*Action\r\n*Dispatcher\r\n*Emitter\r\n*Store\r\n*WebAPI\r\n\r\n##Data flow\r\nThe data flow in a flux application is unidirectional. Actions come from external sources such as the user or the server and are always collected by the Dispatcher. Stores listen to the Dispatcher and react to new data coming through the pipeline. If the action has caused the Store to alter it's internal state then the Store emits a change using it's Emitter. Application views can choose to listen to a store for changes and when a Store changes can query it's internal state.\r\n\r\n![Flux Diagram](http://blog.krawaller.se/img/flux-diagram.png)\r\n\r\n##Dispatcher\r\nYour application should contain a single instance of the Dispatcher class. Any and all actions should be routed through the dispatcher via `dispatcher.dispatch(action);`.\r\n\r\n \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}